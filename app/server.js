const prompt = require("./prompt"); // Ensure this imports correctly
const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs");
require('dotenv').config();
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const { v4: uuidv4 } = require('uuid');
const express = require("express");
const cors = require("cors");
const app = express();
const port = 3000;

app.use(cors());
app.use(express.json({ limit: '50mb' }));

// Route to generate content using AI
app.post('/generate', async (req, res) => {
    const { imageBase64 } = req.body; // Receiving base64 image
    
    console.log("Received imageBase64:", imageBase64);  // Logging the base64 image data

    const medid = uuidv4();
    const filePath = `prescription_photos/${medid}.jpg`;

    // Check if the imageBase64 is undefined or empty
    if (!imageBase64) {
        console.log("No image data provided.");
        return res.status(400).json({ error: "No image data provided." });
    }

    try {
        // Decode and save the image
        const imageBuffer = Buffer.from(imageBase64, 'base64');
        fs.writeFileSync(filePath, imageBuffer);

        // Check if the prompt is valid
        if (!prompt) {
            console.log("Prompt is missing.");
            return res.status(400).json({ error: "Prompt is not available." });
        }

        // Initialize the model for generative AI
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        // Generate content using the prompt and image data
        const result = await model.generateContent([
            prompt, // Passing the prompt from the prompt.js file
            {
                inlineData: {
                    data: imageBase64, // Pass the base64 image data to the AI model
                    mimeType: 'image/jpeg',
                }
            }
        ]);

        // Check if the response contains the expected data
        const responseText = result.response.text();
        if (!responseText) {
            console.log("No response text generated by AI.");
            return res.status(500).json({ error: "No response text generated by the AI." });
        }

        // Return the generated content to the frontend
        console.log("response: ", responseText)
        res.json({ response: responseText });

    } catch (error) {
        console.error("Error processing content generation:", error.message);
        res.status(500).json({ error: "Error processing the request." });
    }
});

app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
