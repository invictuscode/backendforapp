const {photoPrompt, TextPrompt} = require("./prompt");
const { GoogleGenerativeAI } = require("@google/generative-ai");
require('dotenv').config();
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const express = require("express");
const cors = require("cors");
const app = express();
const port = 3000;

app.use(cors());
app.use(express.json({ limit: '50mb' }));

// Logging function
const log = (message, data = null) => {
    const timestamp = new Date().toISOString();
    if (data) {
        console.log(`[${timestamp}] ${message}:`, data);
    } else {
        console.log(`[${timestamp}] ${message}`);
    }
};

// Graceful shutdown function
const gracefulShutdown = () => {
    log("Server is shutting down...");
    server.close(() => {
        log("HTTP server closed.");
        process.exit(0);
    });

    // Force close server after 5 seconds if still open
    setTimeout(() => {
        log("Forcefully shutting down the server.");
        process.exit(1);
    }, 5000);
};

// Route to generate content using AI
app.post('/generate/image', async (req, res) => {
    const { imageBase64 } = req.body; // Receiving base64 image

    // Check if the imageBase64 is undefined or empty
    if (!imageBase64) {
        log("No image data provided.");
        return res.status(400).json({ error: "No image data provided." });
    }

    try {  
        // Check if the prompt is valid
        if (!photoPrompt) {
            log("Prompt is missing.");
            return res.status(400).json({ error: "Prompt is not available." });
        }

        // Initialize the model for generative AI
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        // Generate content using the prompt and image data
        const result = await model.generateContent([
            photoPrompt, 
            {
                inlineData: {
                    data: imageBase64,
                    mimeType: 'image/jpeg',
                }
            }
        ]);

        // Check if the response contains the expected data
        const responseText = result.response.text();
        if (!responseText) {
            log("No response text generated by AI.");
            return res.status(500).json({ error: "No response text generated by the AI." });
        }

        // Return the generated content to the frontend
        log("Response generated successfully", responseText);
        res.json({ response: responseText });

    } catch (error) {
        log("Error processing content generation", error.message);
        res.status(500).json({ error: "Error processing the request." });
    }
});

//Route to generate content with Text Input
app.post('/generate/textinput', async (req, res) => {
    const { medicine, dose_in_mg, form, quantity, treatment_start_date, treatment_end_date, prescription_refills, frequency, special_instructions } = req.body;

    console.log(req.body)
    if (!medicine && !dose_in_mg && !form && !quantity && !treatment_start_date && !treatment_end_date && !prescription_refills && !frequency && !special_instructions) {
        log("No text data provided.");
        return res.status(400).json({ error: "No text data provided." });
    }

    try {
        if (!TextPrompt) {
            log("Prompt is missing.");
            return res.status(400).json({ error: "Prompt is not available." });
        }

        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        
        // Convert JSON to base64 string
        const jsonString = JSON.stringify(req.body);
        const base64Data = Buffer.from(jsonString).toString('base64');

        // Generate content with properly formatted inline data
        const result = await model.generateContent([
            TextPrompt,
            {
                inlineData: {
                    mimeType: 'text/json',
                    data: base64Data
                }
            }
        ]);

        const responseText = result.response.text();
        if (!responseText) {
            log("No response text generated by AI.");
            return res.status(500).json({ error: "No response text generated by the AI." });
        }

        log("Response generated successfully", responseText);
        res.json({ response: responseText });

    } catch (error) {
        log("Error processing content generation", error.message);
        res.status(500).json({ error: "Error processing the request." });
    }
});

// Start the server
const server = app.listen(port, () => {
    log(`Server is running on http://localhost:${port}`);
});

// Handle signals for graceful shutdown
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// Handle uncaught exceptions and unhandled rejections
process.on('uncaughtException', (error) => {
    log("Uncaught exception", error);
    gracefulShutdown();
});

process.on('unhandledRejection', (reason) => {
    log("Unhandled promise rejection", reason);
    gracefulShutdown();
});
